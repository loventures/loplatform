/*
 * LO Platform copyright (C) 2007â€“2025 LO Ventures LLC.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package loi.cp
package scorm
package v12

/** usage: val obj = scalaxb.fromXML[scorm.v12.Foo](node) val document = scalaxb.toXML[scorm.v12.Foo](obj, "foo",
  * scorm.v12.defaultScope)
  */
object `package` extends XMLProtocol {}

trait XMLProtocol extends scalaxb.XMLStandardTypes:
  val defaultScope                                                                                                    = scalaxb.toScope(
    Some("tns") -> "http://www.imsproject.org/xsd/imscp_rootv1p1p2",
    Some("xml") -> "http://www.w3.org/XML/1998/namespace",
    Some("xs")  -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance"
  )
  implicit lazy val Scormv12_DependencyTypeFormat: scalaxb.XMLFormat[scorm.v12.DependencyType]                        =
    new DefaultScormv12_DependencyTypeFormat {}
  implicit lazy val Scormv12_FileTypeFormat: scalaxb.XMLFormat[scorm.v12.FileType]                                    =
    new DefaultScormv12_FileTypeFormat {}
  implicit lazy val Scormv12_ItemTypeFormat: scalaxb.XMLFormat[scorm.v12.ItemType]                                    =
    new DefaultScormv12_ItemTypeFormat {}
  implicit lazy val Scormv12_ManifestTypeFormat: scalaxb.XMLFormat[scorm.v12.ManifestType]                            =
    new DefaultScormv12_ManifestTypeFormat {}
  implicit lazy val Scormv12_MetadataTypeFormat: scalaxb.XMLFormat[scorm.v12.MetadataType]                            =
    new DefaultScormv12_MetadataTypeFormat {}
  implicit lazy val Scormv12_OrganizationsTypeFormat: scalaxb.XMLFormat[scorm.v12.OrganizationsType]                  =
    new DefaultScormv12_OrganizationsTypeFormat {}
  implicit lazy val Scormv12_OrganizationTypeFormat: scalaxb.XMLFormat[scorm.v12.OrganizationType]                    =
    new DefaultScormv12_OrganizationTypeFormat {}
  implicit lazy val Scormv12_ResourcesTypeFormat: scalaxb.XMLFormat[scorm.v12.ResourcesType]                          =
    new DefaultScormv12_ResourcesTypeFormat {}
  implicit lazy val Scormv12_ResourceTypeFormat: scalaxb.XMLFormat[scorm.v12.ResourceType]                            =
    new DefaultScormv12_ResourceTypeFormat {}
  implicit lazy val Scormv12_Grpu46anySequenceFormat: scalaxb.XMLFormat[scorm.v12.Grpu46anySequence]                  =
    new DefaultScormv12_Grpu46anySequenceFormat {}
  implicit lazy val Scormv12_Attru46versionFormat: scalaxb.AttributeGroupFormat[scorm.v12.Attru46version]             =
    new DefaultScormv12_Attru46versionFormat {}
  implicit lazy val Scormv12_Attru46resourcetypeu46reqFormat
    : scalaxb.AttributeGroupFormat[scorm.v12.Attru46resourcetypeu46req] =
    new DefaultScormv12_Attru46resourcetypeu46reqFormat {}
  implicit lazy val Scormv12_Attru46identifierrefFormat: scalaxb.AttributeGroupFormat[scorm.v12.Attru46identifierref] =
    new DefaultScormv12_Attru46identifierrefFormat {}
  implicit lazy val Scormv12_Attru46isvisibleFormat: scalaxb.AttributeGroupFormat[scorm.v12.Attru46isvisible]         =
    new DefaultScormv12_Attru46isvisibleFormat {}
  implicit lazy val Scormv12_Attru46identifieru46reqFormat
    : scalaxb.AttributeGroupFormat[scorm.v12.Attru46identifieru46req] =
    new DefaultScormv12_Attru46identifieru46reqFormat {}
  implicit lazy val Scormv12_Attru46hrefFormat: scalaxb.AttributeGroupFormat[scorm.v12.Attru46href]                   =
    new DefaultScormv12_Attru46hrefFormat {}
  implicit lazy val Scormv12_Attru46baseFormat: scalaxb.AttributeGroupFormat[scorm.v12.Attru46base]                   =
    new DefaultScormv12_Attru46baseFormat {}
  implicit lazy val Scormv12_Attru46defaultFormat: scalaxb.AttributeGroupFormat[scorm.v12.Attru46default]             =
    new DefaultScormv12_Attru46defaultFormat {}
  implicit lazy val Scormv12_Attru46hrefu46reqFormat: scalaxb.AttributeGroupFormat[scorm.v12.Attru46hrefu46req]       =
    new DefaultScormv12_Attru46hrefu46reqFormat {}
  implicit lazy val Scormv12_Attru46identifierFormat: scalaxb.AttributeGroupFormat[scorm.v12.Attru46identifier]       =
    new DefaultScormv12_Attru46identifierFormat {}
  implicit lazy val Scormv12_Attru46parametersFormat: scalaxb.AttributeGroupFormat[scorm.v12.Attru46parameters]       =
    new DefaultScormv12_Attru46parametersFormat {}
  implicit lazy val Scormv12_Attru46identifierrefu46reqFormat
    : scalaxb.AttributeGroupFormat[scorm.v12.Attru46identifierrefu46req] =
    new DefaultScormv12_Attru46identifierrefu46reqFormat {}
  implicit lazy val Scormv12_Attru46structureu46reqFormat
    : scalaxb.AttributeGroupFormat[scorm.v12.Attru46structureu46req] =
    new DefaultScormv12_Attru46structureu46reqFormat {}

  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns             = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key            = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match
      case (Some("title"), Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2") | None)         =>
        Some(DataRecord(ns, key, xsns, xstype, fromXML[String](elem)))
      case (Some("schema"), Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2") | None)        =>
        Some(DataRecord(ns, key, xsns, xstype, fromXML[String](elem)))
      case (Some("resource"), Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2") | None)      =>
        Some(DataRecord(ns, key, xsns, xstype, fromXML[scorm.v12.ResourceType](elem)))
      case (Some("organization"), Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2") | None)  =>
        Some(DataRecord(ns, key, xsns, xstype, fromXML[scorm.v12.OrganizationType](elem)))
      case (Some("manifest"), Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2") | None)      =>
        Some(DataRecord(ns, key, xsns, xstype, fromXML[scorm.v12.ManifestType](elem)))
      case (Some("file"), Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2") | None)          =>
        Some(DataRecord(ns, key, xsns, xstype, fromXML[scorm.v12.FileType](elem)))
      case (Some("dependency"), Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2") | None)    =>
        Some(DataRecord(ns, key, xsns, xstype, fromXML[scorm.v12.DependencyType](elem)))
      case (Some("item"), Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2") | None)          =>
        Some(DataRecord(ns, key, xsns, xstype, fromXML[scorm.v12.ItemType](elem)))
      case (Some("metadata"), Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2") | None)      =>
        Some(DataRecord(ns, key, xsns, xstype, fromXML[scorm.v12.MetadataType](elem)))
      case (Some("organizations"), Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2") | None) =>
        Some(DataRecord(ns, key, xsns, xstype, fromXML[scorm.v12.OrganizationsType](elem)))
      case (Some("resources"), Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2") | None)     =>
        Some(DataRecord(ns, key, xsns, xstype, fromXML[scorm.v12.ResourcesType](elem)))
      case (Some("schemaversion"), Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2") | None) =>
        Some(DataRecord(ns, key, xsns, xstype, fromXML[String](elem)))

      case _ => None
    end match

  trait DefaultScormv12_DependencyTypeFormat
      extends scalaxb.ElemNameParser[scorm.v12.DependencyType]
      with Scormv12_Grpu46anyGroupFormat:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    override def typeName: Option[String] = Some("dependencyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[scorm.v12.DependencyType] =
      phrase((parseGrpu46anyGroup(node, scalaxb.ElemName(node) :: stack)) ^^ { case p1 =>
        scorm.v12.DependencyType(
          p1,
          scala.collection.immutable.ListMap(
            List(
              (node \ "@identifierref").headOption map { x =>
                scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))
              } map { "@identifierref" -> _ }
            ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match
              case elem: scala.xml.Elem =>
                elem.attributes.toList flatMap {
                  case scala.xml.UnprefixedAttribute(key, value, _) if key == "identifierref" => Nil
                  case scala.xml.UnprefixedAttribute(key, value, _)                           =>
                    List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
                  case scala.xml.PrefixedAttribute(pre, key, value, _)                        =>
                    val ns = elem.scope.getURI(pre)
                    List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
                  case _                                                                      => Nil
                }
              case _                    => Nil)*
          )
        )
      })

    override def writesAttribute(
      __obj: scorm.v12.DependencyType,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@identifierref", _) =>
          attr = scala.xml.Attribute(null, "identifierref", __obj.identifierref.toString, attr)
        case (key, x)              =>
          attr =
            scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    end writesAttribute

    def writesChildNodes(__obj: scorm.v12.DependencyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb
        .toXML[scorm.v12.Grpu46anySequence](__obj.grpu46anySequence1, None, Some("grpu46anySequence1"), __scope, false))
  end DefaultScormv12_DependencyTypeFormat

  trait DefaultScormv12_FileTypeFormat
      extends scalaxb.ElemNameParser[scorm.v12.FileType]
      with Scormv12_Grpu46anyGroupFormat:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    override def typeName: Option[String] = Some("fileType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[scorm.v12.FileType] =
      phrase(
        opt(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "metadata")) ~
          (parseGrpu46anyGroup(node, scalaxb.ElemName(node) :: stack)) ^^ { case p1 ~ p2 =>
            scorm.v12.FileType(
              p1.headOption map { scalaxb.fromXML[scorm.v12.MetadataType](_, scalaxb.ElemName(node) :: stack) },
              p2,
              scala.collection.immutable.ListMap(
                List(
                  (node \ "@href").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack))
                  } map { "@href" -> _ }
                ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match
                  case elem: scala.xml.Elem =>
                    elem.attributes.toList flatMap {
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "href" => Nil
                      case scala.xml.UnprefixedAttribute(key, value, _)                  =>
                        List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
                      case scala.xml.PrefixedAttribute(pre, key, value, _)               =>
                        val ns = elem.scope.getURI(pre)
                        List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
                      case _                                                             => Nil
                    }
                  case _                    => Nil)*
              )
            )
          }
      )

    override def writesAttribute(__obj: scorm.v12.FileType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData =
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@href", _) => attr = scala.xml.Attribute(null, "href", __obj.href.toString, attr)
        case (key, x)     =>
          attr =
            scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr

    def writesChildNodes(__obj: scorm.v12.FileType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(
        __obj.metadata map {
          scalaxb.toXML[scorm.v12.MetadataType](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("metadata"),
            __scope,
            false
          )
        } getOrElse { Nil },
        scalaxb.toXML[scorm.v12.Grpu46anySequence](
          __obj.grpu46anySequence2,
          None,
          Some("grpu46anySequence2"),
          __scope,
          false
        )
      )
  end DefaultScormv12_FileTypeFormat

  trait DefaultScormv12_ItemTypeFormat
      extends scalaxb.ElemNameParser[scorm.v12.ItemType]
      with Scormv12_Grpu46anyGroupFormat:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    override def typeName: Option[String] = Some("itemType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[scorm.v12.ItemType] =
      phrase(
        opt(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "title")) ~
          safeRep(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "item")) ~
          opt(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "metadata")) ~
          (parseGrpu46anyGroup(node, scalaxb.ElemName(node) :: stack)) ^^ { case p1 ~ p2 ~ p3 ~ p4 =>
            scorm.v12.ItemType(
              p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
              p2 map { scalaxb.fromXML[scorm.v12.ItemType](_, scalaxb.ElemName(node) :: stack) },
              p3.headOption map { scalaxb.fromXML[scorm.v12.MetadataType](_, scalaxb.ElemName(node) :: stack) },
              p4,
              scala.collection.immutable.ListMap(
                List(
                  (node \ "@identifier").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))
                  } map { "@identifier" -> _ },
                  (node \ "@identifierref").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))
                  } map { "@identifierref" -> _ },
                  (node \ "@isvisible").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack))
                  } map { "@isvisible" -> _ },
                  (node \ "@parameters").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))
                  } map { "@parameters" -> _ }
                ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match
                  case elem: scala.xml.Elem =>
                    elem.attributes.toList flatMap {
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "identifier"    => Nil
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "identifierref" => Nil
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "isvisible"     => Nil
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "parameters"    => Nil
                      case scala.xml.UnprefixedAttribute(key, value, _)                           =>
                        List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
                      case scala.xml.PrefixedAttribute(pre, key, value, _)                        =>
                        val ns = elem.scope.getURI(pre)
                        List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
                      case _                                                                      => Nil
                    }
                  case _                    => Nil)*
              )
            )
          }
      )

    override def writesAttribute(__obj: scorm.v12.ItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData =
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@identifier", _)    => attr = scala.xml.Attribute(null, "identifier", __obj.identifier.toString, attr)
        case ("@identifierref", _) =>
          __obj.identifierref foreach { x => attr = scala.xml.Attribute(null, "identifierref", x.toString, attr) }
        case ("@isvisible", _)     =>
          __obj.isvisible foreach { x => attr = scala.xml.Attribute(null, "isvisible", x.toString, attr) }
        case ("@parameters", _)    =>
          __obj.parameters foreach { x => attr = scala.xml.Attribute(null, "parameters", x.toString, attr) }
        case (key, x)              =>
          attr =
            scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    end writesAttribute

    def writesChildNodes(__obj: scorm.v12.ItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(
        __obj.title map {
          scalaxb
            .toXML[String](_, Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), Some("title"), __scope, false)
        } getOrElse { Nil },
        __obj.item flatMap {
          scalaxb.toXML[scorm.v12.ItemType](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("item"),
            __scope,
            false
          )
        },
        __obj.metadata map {
          scalaxb.toXML[scorm.v12.MetadataType](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("metadata"),
            __scope,
            false
          )
        } getOrElse { Nil },
        scalaxb.toXML[scorm.v12.Grpu46anySequence](
          __obj.grpu46anySequence4,
          None,
          Some("grpu46anySequence4"),
          __scope,
          false
        )
      )
  end DefaultScormv12_ItemTypeFormat

  trait DefaultScormv12_ManifestTypeFormat
      extends scalaxb.ElemNameParser[scorm.v12.ManifestType]
      with Scormv12_Grpu46anyGroupFormat:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    override def typeName: Option[String] = Some("manifestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[scorm.v12.ManifestType] =
      phrase(
        opt(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "metadata")) ~
          (scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "organizations")) ~
          (scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "resources")) ~
          safeRep(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "manifest")) ~
          (parseGrpu46anyGroup(node, scalaxb.ElemName(node) :: stack)) ^^ { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
            scorm.v12.ManifestType(
              p1.headOption map { scalaxb.fromXML[scorm.v12.MetadataType](_, scalaxb.ElemName(node) :: stack) },
              scalaxb.fromXML[scorm.v12.OrganizationsType](p2, scalaxb.ElemName(node) :: stack),
              scalaxb.fromXML[scorm.v12.ResourcesType](p3, scalaxb.ElemName(node) :: stack),
              p4 map { scalaxb.fromXML[scorm.v12.ManifestType](_, scalaxb.ElemName(node) :: stack) },
              p5,
              scala.collection.immutable.ListMap(
                List(
                  (node \ "@identifier").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))
                  } map { "@identifier" -> _ },
                  (node \ "@version").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))
                  } map { "@version" -> _ },
                  (node \ "@{http://www.w3.org/XML/1998/namespace}base").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack))
                  } map { "@{http://www.w3.org/XML/1998/namespace}base" -> _ }
                ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match
                  case elem: scala.xml.Elem =>
                    elem.attributes.toList flatMap {
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "identifier" => Nil
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "version"    => Nil
                      case scala.xml.PrefixedAttribute(pre, key, value, _)
                          if pre == elem.scope.getPrefix("http://www.w3.org/XML/1998/namespace") &&
                            key == "base" =>
                        Nil
                      case scala.xml.UnprefixedAttribute(key, value, _)                        =>
                        List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
                      case scala.xml.PrefixedAttribute(pre, key, value, _)                     =>
                        val ns = elem.scope.getURI(pre)
                        List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
                      case _                                                                   => Nil
                    }
                  case _                    => Nil)*
              )
            )
          }
      )

    override def writesAttribute(
      __obj: scorm.v12.ManifestType,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@identifier", _)                                 => attr = scala.xml.Attribute(null, "identifier", __obj.identifier.toString, attr)
        case ("@version", _)                                    =>
          __obj.version foreach { x => attr = scala.xml.Attribute(null, "version", x.toString, attr) }
        case ("@{http://www.w3.org/XML/1998/namespace}base", _) =>
          __obj.xmlbase foreach { x =>
            attr =
              scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "base", x.toString, attr)
          }
        case (key, x)                                           =>
          attr =
            scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    end writesAttribute

    def writesChildNodes(__obj: scorm.v12.ManifestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(
        __obj.metadata map {
          scalaxb.toXML[scorm.v12.MetadataType](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("metadata"),
            __scope,
            false
          )
        } getOrElse { Nil },
        scalaxb.toXML[scorm.v12.OrganizationsType](
          __obj.organizations,
          Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
          Some("organizations"),
          __scope,
          false
        ),
        scalaxb.toXML[scorm.v12.ResourcesType](
          __obj.resources,
          Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
          Some("resources"),
          __scope,
          false
        ),
        __obj.manifest flatMap {
          scalaxb.toXML[scorm.v12.ManifestType](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("manifest"),
            __scope,
            false
          )
        },
        scalaxb.toXML[scorm.v12.Grpu46anySequence](
          __obj.grpu46anySequence5,
          None,
          Some("grpu46anySequence5"),
          __scope,
          false
        )
      )
  end DefaultScormv12_ManifestTypeFormat

  trait DefaultScormv12_MetadataTypeFormat
      extends scalaxb.ElemNameParser[scorm.v12.MetadataType]
      with Scormv12_Grpu46anyGroupFormat:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    override def typeName: Option[String] = Some("metadataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[scorm.v12.MetadataType] =
      phrase(
        opt(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "schema")) ~
          opt(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "schemaversion")) ~
          (parseGrpu46anyGroup(node, scalaxb.ElemName(node) :: stack)) ^^ { case p1 ~ p2 ~ p3 =>
            scorm.v12.MetadataType(
              p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
              p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
              p3
            )
          }
      )

    def writesChildNodes(__obj: scorm.v12.MetadataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(
        __obj.schema map {
          scalaxb
            .toXML[String](_, Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), Some("schema"), __scope, false)
        } getOrElse { Nil },
        __obj.schemaversion map {
          scalaxb.toXML[String](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("schemaversion"),
            __scope,
            false
          )
        } getOrElse { Nil },
        scalaxb.toXML[scorm.v12.Grpu46anySequence](
          __obj.grpu46anySequence3,
          None,
          Some("grpu46anySequence3"),
          __scope,
          false
        )
      )
  end DefaultScormv12_MetadataTypeFormat

  trait DefaultScormv12_OrganizationsTypeFormat
      extends scalaxb.ElemNameParser[scorm.v12.OrganizationsType]
      with Scormv12_Grpu46anyGroupFormat:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    override def typeName: Option[String] = Some("organizationsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[scorm.v12.OrganizationsType] =
      phrase(
        safeRep(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "organization")) ~
          (parseGrpu46anyGroup(node, scalaxb.ElemName(node) :: stack)) ^^ { case p1 ~ p2 =>
            scorm.v12.OrganizationsType(
              p1 map { scalaxb.fromXML[scorm.v12.OrganizationType](_, scalaxb.ElemName(node) :: stack) },
              p2,
              scala.collection.immutable.ListMap(
                List(
                  (node \ "@default").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))
                  } map { "@default" -> _ }
                ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match
                  case elem: scala.xml.Elem =>
                    elem.attributes.toList flatMap {
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "default" => Nil
                      case scala.xml.UnprefixedAttribute(key, value, _)                     =>
                        List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
                      case scala.xml.PrefixedAttribute(pre, key, value, _)                  =>
                        val ns = elem.scope.getURI(pre)
                        List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
                      case _                                                                => Nil
                    }
                  case _                    => Nil)*
              )
            )
          }
      )

    override def writesAttribute(
      __obj: scorm.v12.OrganizationsType,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@default", _) =>
          __obj.default foreach { x => attr = scala.xml.Attribute(null, "default", x.toString, attr) }
        case (key, x)        =>
          attr =
            scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    end writesAttribute

    def writesChildNodes(__obj: scorm.v12.OrganizationsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(
        __obj.organization flatMap {
          scalaxb.toXML[scorm.v12.OrganizationType](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("organization"),
            __scope,
            false
          )
        },
        scalaxb.toXML[scorm.v12.Grpu46anySequence](
          __obj.grpu46anySequence2,
          None,
          Some("grpu46anySequence2"),
          __scope,
          false
        )
      )
  end DefaultScormv12_OrganizationsTypeFormat

  trait DefaultScormv12_OrganizationTypeFormat
      extends scalaxb.ElemNameParser[scorm.v12.OrganizationType]
      with Scormv12_Grpu46anyGroupFormat:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    override def typeName: Option[String] = Some("organizationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[scorm.v12.OrganizationType] =
      phrase(
        opt(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "title")) ~
          safeRep(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "item")) ~
          opt(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "metadata")) ~
          (parseGrpu46anyGroup(node, scalaxb.ElemName(node) :: stack)) ^^ { case p1 ~ p2 ~ p3 ~ p4 =>
            scorm.v12.OrganizationType(
              p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
              p2 map { scalaxb.fromXML[scorm.v12.ItemType](_, scalaxb.ElemName(node) :: stack) },
              p3.headOption map { scalaxb.fromXML[scorm.v12.MetadataType](_, scalaxb.ElemName(node) :: stack) },
              p4,
              scala.collection.immutable.ListMap(
                List(
                  (node \ "@identifier").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))
                  } map { "@identifier" -> _ },
                  (node \ "@structure").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))
                  } orElse Some(
                    scalaxb.DataRecord(
                      None,
                      None,
                      scalaxb.fromXML[String](scala.xml.Text("hierarchical"), scalaxb.ElemName(node) :: stack)
                    )
                  ) map { "@structure" -> _ }
                ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match
                  case elem: scala.xml.Elem =>
                    elem.attributes.toList flatMap {
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "identifier" => Nil
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "structure"  => Nil
                      case scala.xml.UnprefixedAttribute(key, value, _)                        =>
                        List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
                      case scala.xml.PrefixedAttribute(pre, key, value, _)                     =>
                        val ns = elem.scope.getURI(pre)
                        List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
                      case _                                                                   => Nil
                    }
                  case _                    => Nil)*
              )
            )
          }
      )

    override def writesAttribute(
      __obj: scorm.v12.OrganizationType,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@identifier", _) => attr = scala.xml.Attribute(null, "identifier", __obj.identifier.toString, attr)
        case ("@structure", _)  =>
          if __obj.structure.toString != "hierarchical" then
            attr = scala.xml.Attribute(null, "structure", __obj.structure.toString, attr)
        case (key, x)           =>
          attr =
            scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    end writesAttribute

    def writesChildNodes(__obj: scorm.v12.OrganizationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(
        __obj.title map {
          scalaxb
            .toXML[String](_, Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), Some("title"), __scope, false)
        } getOrElse { Nil },
        __obj.item flatMap {
          scalaxb.toXML[scorm.v12.ItemType](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("item"),
            __scope,
            false
          )
        },
        __obj.metadata map {
          scalaxb.toXML[scorm.v12.MetadataType](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("metadata"),
            __scope,
            false
          )
        } getOrElse { Nil },
        scalaxb.toXML[scorm.v12.Grpu46anySequence](
          __obj.grpu46anySequence4,
          None,
          Some("grpu46anySequence4"),
          __scope,
          false
        )
      )
  end DefaultScormv12_OrganizationTypeFormat

  trait DefaultScormv12_ResourcesTypeFormat
      extends scalaxb.ElemNameParser[scorm.v12.ResourcesType]
      with Scormv12_Grpu46anyGroupFormat:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    override def typeName: Option[String] = Some("resourcesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[scorm.v12.ResourcesType] =
      phrase(
        safeRep(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "resource")) ~
          (parseGrpu46anyGroup(node, scalaxb.ElemName(node) :: stack)) ^^ { case p1 ~ p2 =>
            scorm.v12.ResourcesType(
              p1 map { scalaxb.fromXML[scorm.v12.ResourceType](_, scalaxb.ElemName(node) :: stack) },
              p2,
              scala.collection.immutable.ListMap(
                List(
                  (node \ "@{http://www.w3.org/XML/1998/namespace}base").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack))
                  } map { "@{http://www.w3.org/XML/1998/namespace}base" -> _ }
                ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match
                  case elem: scala.xml.Elem =>
                    elem.attributes.toList flatMap {
                      case scala.xml.PrefixedAttribute(pre, key, value, _)
                          if pre == elem.scope.getPrefix("http://www.w3.org/XML/1998/namespace") &&
                            key == "base" =>
                        Nil
                      case scala.xml.UnprefixedAttribute(key, value, _)    =>
                        List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
                      case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                        val ns = elem.scope.getURI(pre)
                        List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
                      case _                                               => Nil
                    }
                  case _                    => Nil)*
              )
            )
          }
      )

    override def writesAttribute(
      __obj: scorm.v12.ResourcesType,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{http://www.w3.org/XML/1998/namespace}base", _) =>
          __obj.xmlbase foreach { x =>
            attr =
              scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "base", x.toString, attr)
          }
        case (key, x)                                           =>
          attr =
            scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    end writesAttribute

    def writesChildNodes(__obj: scorm.v12.ResourcesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(
        __obj.resource flatMap {
          scalaxb.toXML[scorm.v12.ResourceType](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("resource"),
            __scope,
            false
          )
        },
        scalaxb.toXML[scorm.v12.Grpu46anySequence](
          __obj.grpu46anySequence2,
          None,
          Some("grpu46anySequence2"),
          __scope,
          false
        )
      )
  end DefaultScormv12_ResourcesTypeFormat

  trait DefaultScormv12_ResourceTypeFormat
      extends scalaxb.ElemNameParser[scorm.v12.ResourceType]
      with Scormv12_Grpu46anyGroupFormat:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    override def typeName: Option[String] = Some("resourceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[scorm.v12.ResourceType] =
      phrase(
        opt(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "metadata")) ~
          safeRep(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "file")) ~
          safeRep(scalaxb.ElemName(Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"), "dependency")) ~
          (parseGrpu46anyGroup(node, scalaxb.ElemName(node) :: stack)) ^^ { case p1 ~ p2 ~ p3 ~ p4 =>
            scorm.v12.ResourceType(
              p1.headOption map { scalaxb.fromXML[scorm.v12.MetadataType](_, scalaxb.ElemName(node) :: stack) },
              p2 map { scalaxb.fromXML[scorm.v12.FileType](_, scalaxb.ElemName(node) :: stack) },
              p3 map { scalaxb.fromXML[scorm.v12.DependencyType](_, scalaxb.ElemName(node) :: stack) },
              p4,
              scala.collection.immutable.ListMap(
                List(
                  (node \ "@identifier").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))
                  } map { "@identifier" -> _ },
                  (node \ "@type").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))
                  } map { "@type" -> _ },
                  (node \ "@{http://www.w3.org/XML/1998/namespace}base").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack))
                  } map { "@{http://www.w3.org/XML/1998/namespace}base" -> _ },
                  (node \ "@href").headOption map { x =>
                    scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack))
                  } map { "@href" -> _ }
                ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match
                  case elem: scala.xml.Elem =>
                    elem.attributes.toList flatMap {
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "identifier" => Nil
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "type"       => Nil
                      case scala.xml.PrefixedAttribute(pre, key, value, _)
                          if pre == elem.scope.getPrefix("http://www.w3.org/XML/1998/namespace") &&
                            key == "base" =>
                        Nil
                      case scala.xml.UnprefixedAttribute(key, value, _) if key == "href"       => Nil
                      case scala.xml.UnprefixedAttribute(key, value, _)                        =>
                        List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
                      case scala.xml.PrefixedAttribute(pre, key, value, _)                     =>
                        val ns = elem.scope.getURI(pre)
                        List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
                      case _                                                                   => Nil
                    }
                  case _                    => Nil)*
              )
            )
          }
      )

    override def writesAttribute(
      __obj: scorm.v12.ResourceType,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@identifier", _)                                 => attr = scala.xml.Attribute(null, "identifier", __obj.identifier.toString, attr)
        case ("@type", _)                                       => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@{http://www.w3.org/XML/1998/namespace}base", _) =>
          __obj.xmlbase foreach { x =>
            attr =
              scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "base", x.toString, attr)
          }
        case ("@href", _)                                       => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case (key, x)                                           =>
          attr =
            scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    end writesAttribute

    def writesChildNodes(__obj: scorm.v12.ResourceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(
        __obj.metadata map {
          scalaxb.toXML[scorm.v12.MetadataType](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("metadata"),
            __scope,
            false
          )
        } getOrElse { Nil },
        __obj.file flatMap {
          scalaxb.toXML[scorm.v12.FileType](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("file"),
            __scope,
            false
          )
        },
        __obj.dependency flatMap {
          scalaxb.toXML[scorm.v12.DependencyType](
            _,
            Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2"),
            Some("dependency"),
            __scope,
            false
          )
        },
        scalaxb.toXML[scorm.v12.Grpu46anySequence](
          __obj.grpu46anySequence4,
          None,
          Some("grpu46anySequence4"),
          __scope,
          false
        )
      )
  end DefaultScormv12_ResourceTypeFormat

  /** Any namespaced element from any namespace may be included within an "any" element. The namespace for the imported
    * element must be defined in the instance, and the schema must be imported.
    */
  trait Scormv12_Grpu46anyGroupFormat extends scalaxb.AnyElemNameParser:
    def parseGrpu46anyGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[scorm.v12.Grpu46anySequence] =
      ((safeRep(any(_.namespace != Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")))) ^^ { case p1 =>
        scorm.v12.Grpu46anySequence(p1 map {
          scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack)
        }*)
      })

    def parseGrpu46anyGroup(
      node: scala.xml.Node,
      stack: List[scalaxb.ElemName],
      wrap: Boolean
    ): Parser[scalaxb.DataRecord[Any]] =
      ((safeRep(any(_.namespace != Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")))) ^^ { case p1 =>
        scalaxb.DataRecord(scorm.v12.Grpu46anySequence(p1 map {
          scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack)
        }*))
      })

    def parsemixedGrpu46anyGroup(
      node: scala.xml.Node,
      stack: List[scalaxb.ElemName]
    ): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((safeRep(
        ((any(_.namespace != Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")) ^^ (scalaxb
          .fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
          optTextRecord) ^^ { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) }
      ) ~
        optTextRecord) ^^ { case p1 ~ p2 => Seq.concat(p1.flatten, p2.toList) })
  end Scormv12_Grpu46anyGroupFormat

  trait DefaultScormv12_Grpu46anySequenceFormat extends scalaxb.XMLFormat[scorm.v12.Grpu46anySequence]:
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, scorm.v12.Grpu46anySequence] =
      Left("don't call me.")

    def writes(
      __obj: scorm.v12.Grpu46anySequence,
      __namespace: Option[String],
      __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding,
      __typeAttribute: Boolean
    ): scala.xml.NodeSeq =
      __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) }
  end DefaultScormv12_Grpu46anySequenceFormat

  trait DefaultScormv12_Attru46versionFormat extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46version]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, scorm.v12.Attru46version] =
      seq match
        case node: scala.xml.Node =>
          Right(scorm.v12.Attru46version((node \ "@version").headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          }))
        case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46version,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      __obj.version foreach { x => attr = scala.xml.Attribute(null, "version", x.toString, attr) }
      attr
  end DefaultScormv12_Attru46versionFormat

  trait DefaultScormv12_Attru46resourcetypeu46reqFormat
      extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46resourcetypeu46req]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(
      seq: scala.xml.NodeSeq,
      stack: List[scalaxb.ElemName]
    ): Either[String, scorm.v12.Attru46resourcetypeu46req] = seq match
      case node: scala.xml.Node =>
        Right(
          scorm.v12.Attru46resourcetypeu46req(
            scalaxb.fromXML[String]((node \ "@type"), scalaxb.ElemName(node) :: stack)
          )
        )
      case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46resourcetypeu46req,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr
  end DefaultScormv12_Attru46resourcetypeu46reqFormat

  trait DefaultScormv12_Attru46identifierrefFormat extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46identifierref]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, scorm.v12.Attru46identifierref] =
      seq match
        case node: scala.xml.Node =>
          Right(scorm.v12.Attru46identifierref((node \ "@identifierref").headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          }))
        case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46identifierref,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      __obj.identifierref foreach { x => attr = scala.xml.Attribute(null, "identifierref", x.toString, attr) }
      attr
  end DefaultScormv12_Attru46identifierrefFormat

  trait DefaultScormv12_Attru46isvisibleFormat extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46isvisible]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, scorm.v12.Attru46isvisible] =
      seq match
        case node: scala.xml.Node =>
          Right(scorm.v12.Attru46isvisible((node \ "@isvisible").headOption map {
            scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack)
          }))
        case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46isvisible,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      __obj.isvisible foreach { x => attr = scala.xml.Attribute(null, "isvisible", x.toString, attr) }
      attr
  end DefaultScormv12_Attru46isvisibleFormat

  trait DefaultScormv12_Attru46identifieru46reqFormat
      extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46identifieru46req]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(
      seq: scala.xml.NodeSeq,
      stack: List[scalaxb.ElemName]
    ): Either[String, scorm.v12.Attru46identifieru46req] = seq match
      case node: scala.xml.Node =>
        Right(
          scorm.v12.Attru46identifieru46req(
            scalaxb.fromXML[String]((node \ "@identifier"), scalaxb.ElemName(node) :: stack)
          )
        )
      case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46identifieru46req,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      attr = scala.xml.Attribute(null, "identifier", __obj.identifier.toString, attr)
      attr
  end DefaultScormv12_Attru46identifieru46reqFormat

  trait DefaultScormv12_Attru46hrefFormat extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46href]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, scorm.v12.Attru46href] =
      seq match
        case node: scala.xml.Node =>
          Right(scorm.v12.Attru46href((node \ "@href").headOption map {
            scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack)
          }))
        case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46href,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
      attr
  end DefaultScormv12_Attru46hrefFormat

  trait DefaultScormv12_Attru46baseFormat extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46base]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, scorm.v12.Attru46base] =
      seq match
        case node: scala.xml.Node =>
          Right(scorm.v12.Attru46base((node \ "@{http://www.w3.org/XML/1998/namespace}base").headOption map {
            scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack)
          }))
        case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46base,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      __obj.xmlbase foreach { x =>
        attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "base", x.toString, attr)
      }
      attr
    end toAttribute
  end DefaultScormv12_Attru46baseFormat

  trait DefaultScormv12_Attru46defaultFormat extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46default]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, scorm.v12.Attru46default] =
      seq match
        case node: scala.xml.Node =>
          Right(scorm.v12.Attru46default((node \ "@default").headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          }))
        case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46default,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      __obj.default foreach { x => attr = scala.xml.Attribute(null, "default", x.toString, attr) }
      attr
  end DefaultScormv12_Attru46defaultFormat

  trait DefaultScormv12_Attru46hrefu46reqFormat extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46hrefu46req]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, scorm.v12.Attru46hrefu46req] =
      seq match
        case node: scala.xml.Node =>
          Right(
            scorm.v12.Attru46hrefu46req(
              scalaxb.fromXML[java.net.URI]((node \ "@href"), scalaxb.ElemName(node) :: stack)
            )
          )
        case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46hrefu46req,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      attr = scala.xml.Attribute(null, "href", __obj.href.toString, attr)
      attr
  end DefaultScormv12_Attru46hrefu46reqFormat

  trait DefaultScormv12_Attru46identifierFormat extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46identifier]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, scorm.v12.Attru46identifier] =
      seq match
        case node: scala.xml.Node =>
          Right(scorm.v12.Attru46identifier((node \ "@identifier").headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          }))
        case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46identifier,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      __obj.identifier foreach { x => attr = scala.xml.Attribute(null, "identifier", x.toString, attr) }
      attr
  end DefaultScormv12_Attru46identifierFormat

  trait DefaultScormv12_Attru46parametersFormat extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46parameters]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, scorm.v12.Attru46parameters] =
      seq match
        case node: scala.xml.Node =>
          Right(scorm.v12.Attru46parameters((node \ "@parameters").headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          }))
        case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46parameters,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      __obj.parameters foreach { x => attr = scala.xml.Attribute(null, "parameters", x.toString, attr) }
      attr
  end DefaultScormv12_Attru46parametersFormat

  trait DefaultScormv12_Attru46identifierrefu46reqFormat
      extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46identifierrefu46req]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(
      seq: scala.xml.NodeSeq,
      stack: List[scalaxb.ElemName]
    ): Either[String, scorm.v12.Attru46identifierrefu46req] = seq match
      case node: scala.xml.Node =>
        Right(
          scorm.v12.Attru46identifierrefu46req(
            scalaxb.fromXML[String]((node \ "@identifierref"), scalaxb.ElemName(node) :: stack)
          )
        )
      case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46identifierrefu46req,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      attr = scala.xml.Attribute(null, "identifierref", __obj.identifierref.toString, attr)
      attr
  end DefaultScormv12_Attru46identifierrefu46reqFormat

  trait DefaultScormv12_Attru46structureu46reqFormat
      extends scalaxb.AttributeGroupFormat[scorm.v12.Attru46structureu46req]:
    val targetNamespace: Option[String] = Some("http://www.imsproject.org/xsd/imscp_rootv1p1p2")

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, scorm.v12.Attru46structureu46req] =
      seq match
        case node: scala.xml.Node =>
          Right(scorm.v12.Attru46structureu46req((node \ "@structure").headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          } getOrElse { scalaxb.fromXML[String](scala.xml.Text("hierarchical"), scalaxb.ElemName(node) :: stack) }))
        case _                    => Left("reads failed: seq must be scala.xml.Node")

    def toAttribute(
      __obj: scorm.v12.Attru46structureu46req,
      __attr: scala.xml.MetaData,
      __scope: scala.xml.NamespaceBinding
    ): scala.xml.MetaData =
      var attr: scala.xml.MetaData = __attr
      if __obj.structure.toString != "hierarchical" then
        attr = scala.xml.Attribute(null, "structure", __obj.structure.toString, attr)
      attr
  end DefaultScormv12_Attru46structureu46reqFormat
end XMLProtocol
