/*
 * LO Platform copyright (C) 2007–2025 LO Ventures LLC.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.tomcat

import scala.util.Random

/** Cats!
  */
object Banner:
  val shadowCat =
    """
      |██████╗ ███████╗    ███╗   ██╗██╗   ██╗ █████╗ ███╗   ██╗ ██████╗ █████╗ ████████╗
      |██╔══██╗██╔════╝    ████╗  ██║╚██╗ ██╔╝██╔══██╗████╗  ██║██╔════╝██╔══██╗╚══██╔══╝
      |██║  ██║█████╗      ██╔██╗ ██║ ╚████╔╝ ███████║██╔██╗ ██║██║     ███████║   ██║
      |██║  ██║██╔══╝      ██║╚██╗██║  ╚██╔╝  ██╔══██║██║╚██╗██║██║     ██╔══██║   ██║
      |██████╔╝███████╗    ██║ ╚████║   ██║   ██║  ██║██║ ╚████║╚██████╗██║  ██║   ██║
      |╚═════╝ ╚══════╝    ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝╚═╝  ╚═╝   ╚═╝
    """.stripMargin

  val cat =
    """
      |░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
      |░░░░░░░░░░▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄░░░░░░░░░
      |░░░░░░░░▄▀░░░░░░░░░░░░▄░░░░░░░▀▄░░░░░░░
      |░░░░░░░░█░░▄░░░░▄░░░░░░░░░░░░░░█░░░░░░░
      |░░░░░░░░█░░░░░░░░░░░░▄█▄▄░░▄░░░█░▄▄▄░░░
      |░▄▄▄▄▄░░█░░░░░░▀░░░░▀█░░▀▄░░░░░█▀▀░██░░
      |░██▄▀██▄█░░░▄░░░░░░░██░░░░▀▀▀▀▀░░░░██░░
      |░░▀██▄▀██░░░░░░░░▀░██▀░░░░░░░░░░░░░▀██░
      |░░░░▀████░▀░░░░▄░░░██░░░▄█░░░░▄░▄█░░██░
      |░░░░░░░▀█░░░░▄░░░░░██░░░░▄░░░▄░░▄░░░██░
      |░░░░░░░▄█▄░░░░░░░░░░░▀▄░░▀▀▀▀▀▀▀▀░░▄▀░░
      |░░░░░░█▀▀█████████▀▀▀▀████████████▀░░░░
      |░░░░░░████▀░░███▀░░░░░░▀███░░▀██▀░░░░░░
      |░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    """.stripMargin

  val doomCat =
    """
      |▓█████▄ ▓█████     ███▄    █▓██   ██▓ ▄▄▄       ███▄    █  ▄████▄   ▄▄▄     ▄▄▄█████▓
      |▒██▀ ██▌▓█   ▀     ██ ▀█   █ ▒██  ██▒▒████▄     ██ ▀█   █ ▒██▀ ▀█  ▒████▄   ▓  ██▒ ▓▒
      |░██   █▌▒███      ▓██  ▀█ ██▒ ▒██ ██░▒██  ▀█▄  ▓██  ▀█ ██▒▒▓█    ▄ ▒██  ▀█▄ ▒ ▓██░ ▒░
      |░▓█▄   ▌▒▓█  ▄    ▓██▒  ▐▌██▒ ░ ▐██▓░░██▄▄▄▄██ ▓██▒  ▐▌██▒▒▓▓▄ ▄██▒░██▄▄▄▄██░ ▓██▓ ░
      |░▒████▓ ░▒████▒   ▒██░   ▓██░ ░ ██▒▓░ ▓█   ▓██▒▒██░   ▓██░▒ ▓███▀ ░ ▓█   ▓██▒ ▒██▒ ░
      | ▒▒▓  ▒ ░░ ▒░ ░   ░ ▒░   ▒ ▒   ██▒▒▒  ▒▒   ▓▒█░░ ▒░   ▒ ▒ ░ ░▒ ▒  ░ ▒▒   ▓▒█░ ▒ ░░
      | ░ ▒  ▒  ░ ░  ░   ░ ░░   ░ ▒░▓██ ░▒░   ▒   ▒▒ ░░ ░░   ░ ▒░  ░  ▒     ▒   ▒▒ ░   ░
      | ░ ░  ░    ░         ░   ░ ░ ▒ ▒ ░░    ░   ▒      ░   ░ ░ ░          ░   ▒    ░
      |   ░       ░  ░            ░ ░ ░           ░  ░         ░ ░ ░            ░  ░
      | ░                           ░ ░                          ░
    """.stripMargin

  val electroCat =
    """
      | ▄▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄       ▄▄        ▄  ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄        ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄
      |▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌     ▐░░▌      ▐░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░▌      ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
      |▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀      ▐░▌░▌     ▐░▌▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌░▌     ▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌ ▀▀▀▀█░█▀▀▀▀
      |▐░▌       ▐░▌▐░▌               ▐░▌▐░▌    ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌▐░▌    ▐░▌▐░▌          ▐░▌       ▐░▌     ▐░▌
      |▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄▄▄      ▐░▌ ▐░▌   ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌ ▐░▌   ▐░▌▐░▌          ▐░█▄▄▄▄▄▄▄█░▌     ▐░▌
      |▐░▌       ▐░▌▐░░░░░░░░░░░▌     ▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌  ▐░▌  ▐░▌▐░▌          ▐░░░░░░░░░░░▌     ▐░▌
      |▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀▀▀      ▐░▌   ▐░▌ ▐░▌ ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░▌   ▐░▌ ▐░▌▐░▌          ▐░█▀▀▀▀▀▀▀█░▌     ▐░▌
      |▐░▌       ▐░▌▐░▌               ▐░▌    ▐░▌▐░▌     ▐░▌     ▐░▌       ▐░▌▐░▌    ▐░▌▐░▌▐░▌          ▐░▌       ▐░▌     ▐░▌
      |▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄      ▐░▌     ▐░▐░▌     ▐░▌     ▐░▌       ▐░▌▐░▌     ▐░▐░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌       ▐░▌     ▐░▌
      |▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌     ▐░▌      ▐░░▌     ▐░▌     ▐░▌       ▐░▌▐░▌      ▐░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌     ▐░▌
      | ▀▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀▀▀       ▀        ▀▀       ▀       ▀         ▀  ▀        ▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀         ▀       ▀
    """.stripMargin

  val ThreeDeeCat =
    """
      |                    ___                    ___                       ___           ___           ___           ___
      |     _____         /\__\                  /\  \                     /\  \         /\  \         /\__\         /\  \
      |    /::\  \       /:/ _/_                 \:\  \         ___       /::\  \        \:\  \       /:/  /        /::\  \         ___
      |   /:/\:\  \     /:/ /\__\                 \:\  \       /|  |     /:/\:\  \        \:\  \     /:/  /        /:/\:\  \       /\__\
      |  /:/  \:\__\   /:/ /:/ _/_            _____\:\  \     |:|  |    /:/ /::\  \   _____\:\  \   /:/  /  ___   /:/ /::\  \     /:/  /
      | /:/__/ \:|__| /:/_/:/ /\__\          /::::::::\__\    |:|  |   /:/_/:/\:\__\ /::::::::\__\ /:/__/  /\__\ /:/_/:/\:\__\   /:/__/
      | \:\  \ /:/  / \:\/:/ /:/  /          \:\~~\~~\/__/  __|:|__|   \:\/:/  \/__/ \:\~~\~~\/__/ \:\  \ /:/  / \:\/:/  \/__/  /::\  \
      |  \:\  /:/  /   \::/_/:/  /            \:\  \       /::::\  \    \::/__/       \:\  \        \:\  /:/  /   \::/__/      /:/\:\  \
      |   \:\/:/  /     \:\/:/  /              \:\  \      ~~~~\:\  \    \:\  \        \:\  \        \:\/:/  /     \:\  \      \/__\:\  \
      |    \::/  /       \::/  /                \:\__\          \:\__\    \:\__\        \:\__\        \::/  /       \:\__\          \:\__\
      |     \/__/         \/__/                  \/__/           \/__/     \/__/         \/__/         \/__/         \/__/           \/__/
    """.stripMargin

  val catslevania =
    """
      |
      |      ##### ##        ##### ##            ##### #     ##                                         # ###
      |   /#####  /##     ######  /### /      ######  /#    #### /                                    /  /###  /
      | //    /  / ###   /#   /  / ###/      /#   /  / ##    ###/                                    /  /  ###/                #
      |/     /  /   ### /    /  /   ##      /    /  /  ##    # #                                    /  ##   ##                ##
      |     /  /     ###    /  /                /  /    ##   #                                     /  ###                     ##
      |    ## ##      ##   ## ##               ## ##    ##   # ##   ####      /###   ###  /###    ##   ##          /###     ########
      |    ## ##      ##   ## ##               ## ##     ##  #  ##    ###  / / ###  / ###/ #### / ##   ##         / ###  / ########
      |    ## ##      ##   ## ######           ## ##     ##  #  ##     ###/ /   ###/   ##   ###/  ##   ##        /   ###/     ##
      |    ## ##      ##   ## #####            ## ##      ## #  ##      ## ##    ##    ##    ##   ##   ##       ##    ##      ##
      |    ## ##      ##   ## ##               ## ##      ## #  ##      ## ##    ##    ##    ##   ##   ##       ##    ##      ##
      |    #  ##      ##   #  ##               #  ##       ###  ##      ## ##    ##    ##    ##    ##  ##       ##    ##      ##
      |       /       /       /                   /        ###  ##      ## ##    ##    ##    ##     ## #      / ##    ##      ##
      |  /###/       /    /##/         /      /##/          ##  ##      ## ##    /#    ##    ##      ###     /  ##    /#      ##
      | /   ########/    /  ##########/      /  #####            #########  ####/ ##   ###   ###      ######/    ####/ ##     ##
      |/       ####     /     ######        /     ##               #### ###  ###   ##   ###   ###       ###       ###   ##     ##
      |#                #                   #                            ###
      | ##               ##                  ##                   #####   ###
      |                                                         /#######  /#
      |                                                        /      ###/
      |
    """.stripMargin

  val flameCat =
    """
      | (               )
      | )\ )         ( /(                      (             )
      |(()/(   (     )\()) (        )          )\      )  ( /(
      | /(_))  )\   ((_)\  )\ )  ( /(   (    (((_)  ( /(  )\())
      |(_))_  ((_)   _((_)(()/(  )(_))  )\ ) )\___  )(_))(_))/
      | |   \ | __| | \| | )(_))((_)_  _(_/(((/ __|((_)_ | |_
      | | |) || _|  | .` || || |/ _` || ' \))| (__ / _` ||  _|
      | |___/ |___| |_|\_| \_, |\__,_||_||_|  \___|\__,_| \__|
      |                    |__/
    """.stripMargin

  val banners: List[String] = List(shadowCat, cat, doomCat, electroCat, ThreeDeeCat, catslevania, flameCat)

  def randomCat: String = banners(Random.nextInt(banners.length))

  import fansi.*

  def termColors(banner: String = shadowCat): String =
    banner.zipWithIndex.map({ case (char, index) => Color.Full(index % 255)(char.toString) }).mkString

  def rainbow(banner: String = shadowCat): String =
    def nToRGB(i: Int) =
      val n = i % 360
      val r = n match
        case v if v >= 60 && v < 120  => (((v - 60).toDouble / 60.toDouble) * 128).toInt + 128
        case v if v >= 240 && v < 300 => (((v - 240).toDouble / 60.toDouble) * 128).toInt + 128
        case v if v >= 120 && v < 240 => 128
        case _                        => 255
      val g = n match
        case v if v >= 0 && v < 60    => ((v.toDouble / 60.toDouble) * 128).toInt + 128
        case v if v >= 180 && v < 240 => (((v - 180).toDouble / 60.toDouble) * 128).toInt + 128
        case v if v >= 60 && v < 180  => 255
        case _                        => 128
      val b = n match
        case v if v >= 120 && v < 180 => (((v - 120).toDouble / 60.toDouble) * 128).toInt + 128
        case v if v >= 300 && v < 360 => (((v - 300).toDouble / 60.toDouble) * 128).toInt + 128
        case v if v >= 0 && v < 120   => 128
        case _                        => 255
      (r, g, b)
    end nToRGB
    banner.zipWithIndex
      .map({ case (char, index) =>
        val (r, g, b) = nToRGB(index)
        Color.True(r, g, b)(char.toString)
      })
      .mkString
  end rainbow

  def blueRedGradient(banner: String = shadowCat): String =
    banner.zipWithIndex
      .map({ case (char, index) =>
        Back.True(index, 255 - index, 255 - index)(char.toString)
      })
      .mkString
end Banner
