/*
 * LO Platform copyright (C) 2007â€“2025 LO Ventures LLC.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.learningobjects.sbt

import java.io.ByteArrayInputStream
import java.util.Base64.{getDecoder => b64}
import java.util.zip.{GZIPInputStream => Gzip}

import com.github.lalyos.jfiglet._
import sbt._

import scala.util.Random

object Bruce {
  import FontData.fonts

  val banner = Keys.onLoadMessage in Scope.Global := {
    val name = sys.props.get("user.name").filterNot(_.isEmpty)
    val msg  = s"Welcome, $name"
    if (sys.env.contains("CI")) ""
    else fonts.toList(Random.nextInt(fonts.size))._2(msg).concat("\u001b]0;Backend\u0007")
  }
}

private object FontData {
  val fonts: Map[String, String => String] = Map[String, String](
    "muzzle"      -> "H4sIAHzc/lsCA+1VzY7TMBC+5ynmEKiEtnHTbndLFYVF4h8OHBAXAsHbuttAm1SJt2VF4MDz8G68AhM7f1UnaRdxQKhVM7Y/j2fG30wms8Wsz004hwGMoGuDbUMP+qeDfg96xsNrOY9iGMNLLkUchBxeWcYjnAMg2O/1RmzIBmAPxsPheHBmvBVxEkThGGyrdnjO46h+yh4x22b9UV3dNrq3/Rlv5kECsyiU6CGBSyFCmMQC/UzhOgnCK3jB1487CTx5/nQhpNYUX1ZRLIEnSZBIHkrLeMbXAjgsougzcInRSrkaM7bZbKxPuGVNhfFaxMsgyUIF9DgXsbi8gatgjQ5lBMtoGsxuQBbRnKB1NIf+cZRzYSiFQMQYSsiXIrOxWvAJhokGOUyi5VJgaIsgFJZhwsXWA9WjJ2n+uLubGaphWqAk/uiHRO+Q6F0S7ZAogJ+ZZiZKx8wkeAopIirkheFnu6aXCdPFJTN3g7/X4ERppJnsOt1yTjgBMAtxgoIB4aR+LDcHDeYsMh5Goj0StUm0T6IDEj0l0SGJnpHoOYmOSPR+QwYwvfkDVMlmG4zadFoy6na7pWxMgUsaeECbpVHf128VqBfLddJqBZWvctg54bidbPD9TuuJTNPRx7R6U4nqle9r4zocvWo1rs1qF43Gd1WbiK0uqQfVVzqtcRSqhxOZd7Gio23XjQ4AtAEMNt3LchkAy++nV17riZKPGitNeckUPGA63jwiqN1wd6x8KGUvLectuUeua9Tpe7Rf2XFUDbpuWuWs9cSOD+8AH7DlYy+tikp8fdVXKW2nFRVy5ouKTCk6t2mtVZseOpqHg+ozv7nH9nBVy3GZcwbeATn3VB2Coo2VdBEEFCXhOaz966WZUl94FTZrqtZ3ZKvzSPQ9iX4gUZ9EPx4b67GxHhvrsbH+/431K9nqUhL9RqLf/1az/OOavkVm/8mofv38QXL4G7FDP7HKEAAA",
    "calvin S"    -> "H4sIAOsmz1sCA71VvY7aQBDu/RRTuD3MEfJzNCHNRSmiewEaB+wzdwlGxglKZ1GjCCQjEArSSXdCsuTSZZ6GJ8ns7K73B4sqCsbr2ZnZb+ab/Qu/hh3fhVf4vIU2vW+60HZu40kKH76nUZz04L3jfI6TAMaTMIZ4AiEzRkES9BwnStPprOd58+BLy0+G0fhH0IqTe9b3Ou3rTvvd9U272+2+vvGYK/Ocz1tJ/HPmD1vD+JuXRsEo8ecMc3aVjsKWP5s6zu2nj5TCMAn8NBjBfJxGPRAIUz+Nk4dHGh6O79nQq2A0RqXjun359p1TXrJm0Xdi7NHD+tkp/1O3DQpgP/JckmrFxNwWd+hxJyIsWRe/1R0qAZWgRmdiyA70HJaY42nzyyUjy9UlcBd1JDP0AabuUX5AMB72BwoE6M9dWcKcSCYp1B4a9//2IfIZUQJZHojBtCAdXhlRIUqdlSU/bVanzZaJTyQ+M7EAfKV9C8JaCMc9OR7s8WsqjG09khXx1vhnuhUBnY/G0HAB/am28wVjRsY49tijVDbyIgvlU9A6YgoQmn0NwaNY9DUQzlgQL5qIc94ylFFWbC37QYtt0VtfLg2pKYJRHBABUC7NyUNBUtRgjhKG+9mB9rbYMMtAnwLMOWikgOVT87YlnAONZkWwAVSV9toCIpLCJSd9TQE0Dkct0FFGKc7WUa4KqeVJu4i2EMjdYx1xfOstRI8dEt6AHQz08kNOtvXBYaFoO/U3iS90yCFsJe0rENZKHY4inLnTARqsZZ2myrRqGI34L3ABXdnh/IwBcUjrY0upbOQlbw3e566ylnkNoeZAo6+BcMaCeNVEnPOWoYyyYmvZd1psi97icmkyeTuZxQERIDNutoxHkhQ1mFLC1MvNCJTbYsMs0z7EPMw5aKSA5VPztqrvEHWV6gCqSrm2gIikuqErjQJoHEotUCmjVGfraKkKqfL8p5fmX/fiemOMCQAA",
    "ogre"        -> "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",
    "rectangles"  -> "H4sIALict1sCA6VY24rbMBB9z1ecB8O+rGOytIVCCH7oN/QpMKRbZ7uQZKEbCgV9fGVJo7tkeZubjTX3OZoZ5Xw5P506fMFn7OQHu83v6fl+ur1cpvft+XLGj7/4dvrz+hPfXy+X6eX0jv31Nl2n2/3XeJvuz2/XrfwesHsavn7adN2Y+44bEGHcCEDYXyL7C/lSRNBUQhMItdZ1HaKL4piJMT8ixaA45ydyRQS3Ut0sStHyi0VYAcY8sFUwRvoymA2GjYxXRNYxy+8cW9bm2FJtJiAqHLP78H6MVCVTC1JO8oWUGiVLSwqfQriL4c+4SGRToqzo5ULP2UlcNGypr7FnPlvgU+Rxkn/ikCfYKEjisBmVLmYYlOuDfM9kg7XKI2XvTXqNWS61cbBMiKEz4LlPRJlgef4wgKigISHlS42UDQY49BUXqVmqJsUWjbY6sNWkanEtUpmmYGuQeXdXXvbANu9EjY3BYmOPveI6yve8dqSjwaVFn8UmBel2eTc048ZgZJblyzzgYPUNCouRPBvIeBul+ymze+dCpREcG7bAZuuardkNbMRs8qZfoQ1WW9/EBmY7mt5iAUHDckiS4ttoZMImgBXaPCMbtIkPJYCpXbGuaFO2aX7Xnz9qZL9spL7RbOaGakWyhBJ/TGhhEwnbKkyuCwmlA0ETShJtvN+hQrqw39oSEGPSDTstvnmdHKtK0P+CS9/I6lvZ3f4EGaW7qg2Rtr4RyhFbbcrJRJKQoCQxMuq5wYDnhgvhN0mzrY5R0/KbZKE9m1nQtdUsqNVUI7Id0La58lqlX2YMq54A3MTmjQYP2vjH3PgAP2zVSSM/HBVICS5sa6T21Dxrwc3nS1LT4agYAfjnrPwA5Z09cl7zSJeFTl7pg3blsaAUJaX+fsoVzUIfKA3zJBoytCKZW8SJasqQPZ5VgdeQdzdqLSO/RWp4FK9GwCeVhWZA7nRUKdLl01GogQrQqdid3QVh4PrC5tbLbuQme66GbXywR2yuXyGEAzBnj4iejEQP2T8BkjGGRHiwyNZg/w8KHj8bJvocW8MYlGNr6PmcW3Meq5XxAmkOoRHpEpiXDjAKDbxnFNs/vV0umTkTAAA=",
    "slscript"    -> "H4sIAFqct1sCA50Xy46jRvDOV9RhJEAy9MxodrUrWZYnhyhZKVIOiXYPSD0M7hmTYLAAr+PIH5+uqm7e2N740TR0vd+8ZW+P8R18hCd4vId7eHhwnJ/iSm2gyCE5lFX6XXkffXg9wZc4h69FVqsS8LP8K86TdVKmu1CppAoPuzTZhmpzWCHq4xN8OWTw8PnTB+fn9D1TdZD+q6nG+YawNb2vKt+oLINf0uRvlcPyuKXNeh+XcVW81WFS7FYErOnBB/gtLjW9z08OPnrebDS1XVpVaf4O+0Oe1Ie4TjUkcsgPu1dVVs7zbodMmKX5oCaqLOMN/J6qMlGoyZ5262Qf52FRvq8aYOT8CZ4P79o694/E+U9NsKySolTEahNXW9jG3xW8Kq3FYb+Ja82wLmCHIElWVCo7wS6uk23HoI5jOPyx1RK40oVkq/VO0LppBXWpiEyq9YFqr5I0zuAYn0KAX2tN7KS5WQppXqnSANeaWq3+qbVop+NWaQFOxQGOqZZRS5Sp/F1DIE1IijywFHKV1GjGLM1RjfqImtRHRKi1QFXoOHd366n/mkjQKnAVuHfxSWGfAwPhk2LtuOCa22ZhbMIPhP6uHbroU/2wodK54mZBgOBJwQcCfCBEdxLB8zvyEYoAz+9IT1Q1FJ1HePEAvuFdJCAylOxFX7U6Whna0A+PpGiJtysMDCGaVYpZILqLSNwg+BYERDiCsRyt+QlUGFCAKZGhJzg68M4sAeK1t+zZDkKj49iMU+JLaZwCPgMigiets0belARNoERyGB2GHjC9MNBeJnpz0TFAAB1Y+l7OC8D3goRwA4IGEFNW1KRlY2INGjJhf9o3rbEkSzyMOaaGbCmgx7qzJp7RXBjFp9jJLovWQzBKRLMUTV52TT197PKxQAnXDgUiJQX9u3gUSLR0tGjgDX4HzziKpRaWIVyIdMmuKiLWlu03BB0EIHtU33nycsC0CEtEwIiRNyEwwIUQn84JgQyuIrywSIaDXMwiNNbQSJjjWCUXjCZ6CL0dbrH0LYjdS+CejUZGwmDZitjZYMjhZoHh4duQQ1M3tp5Bw48leUZzLHTEnAk/0oJGcgZNNskAK74XnIvEcinFwCSylc4It7Q1y5+zIdXltpA3Fm1TSNKXyfrGmcJULrcbYUNbSYvVi4BbgtK9qYyOOHCd7Hv+hqD0ZGQ5vNzKIZrRwbRU01OJkQ376cSS/SjGQwqpW6KYwhGRTTzamt7JzWvI3Vj2mhYQCYBLKdDg2bprQtKTXi8op3hSgHKrBxw5jEMiOe3iUcKBZYWVhJ5YawkYNRmb0qMGO+jqctQ5IjuTsEH4IJpo/f0pQY57kGg7R/ffGThkO3DQ9PHSn7N67UHKkCPjLK91YImK+RdaogzJjkPjWGCa2SRnSFu1e+waSliPxAQlS4rnAGEGDaYmVnS+FAPxmeKC+PpU8M56fxYzU4aOvVHNsmYusEz2G/eg13LbF7IZgHCinmO0lDMBwBVUsBUm59thVnDem6G/pTzRqgbVrIO2nOnVjVckmXDWK+Zqgl8YY/NzF656ZTX2imHL7xsTxuoAcd75M0C201Gfm7Ros4YQcoTOBvoCnRQJuGyIBX5NDZMXpmYrYbhgN0TTiThwGpUxNIqhbeqEO02bklyDcJJ75/5ELmydufrede3FxdhE8Bhg4aaGbcMpkmIqi3ryFVIWPzSNtgg3Nv6CcP5f3zNP9Nv5DeXUvMXPZhITuhyEzcuZsYedtqUdt8W4zf4Hv8vrE6cSAAA=",
    "stampatello" -> "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",
    "straight"    -> "H4sIAKabt1sCA31VTW/bMAw917+CBx0coLayrqdiGIxh1112GDZAgOAmSus1sYc43VaAP34WKcmy5AyJLYmPH48UJR+Oh7tWwD28h3db2MJ9MV7Obff0fKkPx8PNzTdzHruhh7vi8e0B4FM7whfT/TRnADjRpOn6w1D/6fr68mrq/jgBj+3Y7NuTealfLs/1aIpD99fswXr4+tb28GN43b0AvNmh2Y3169k8dX1b79riczfujm13MucHOA3jBXbtr+7SHkd4bn8beDSmh70Zu6eeHMI4nMzQGzDHKYwQTfw0BUBT4PTUQPOmkBIsREv3ojetNE6/aaxw+kGQTxMkeYkoSA03QEJv3RRb61duFy4ng40Vl99dKCJg47uHBIJUSKSCuaK1jSJFEAoAm5eS9i2VcBIaCJnYkxBBeOFk6+pxK2ge3Ggtwtxp8lzYcgleuuyI44KJ1k4OiphrzYlBoEowAvNxEgpLCOgNKWjtzXJQ8xC5JBS19g5xGZOdITtJrT1jN6oId7EdFU5Ewpp16azK1DpSUJzCsiDgmjA0ohfchj6g6tPeKrcPyV5VVbzlQVFG2i6FjX3Xc9Vh/ruupg6yg6wq5Vt93gLk/NwQg7aDrYaieWLF3YCc+9IKvd+lVQAAMncStIu0IMH0XRcgN8EM8nnHUGZBfoUVzH5ChyIxRVAZADldF1jJ1cAOBAYV5kV1h0Xl5Ykq7ghfsVT/s1SQVb0kjUXirs/pJgOELL8rLBlUfDxASVhJnkuCUqWVse7oCskLzcCCiGPIFvEOUHsTcdTxTUu8LKsg5MNIm45LTaniD0D0GSj07FOllzQnyP1Yepcz4Jt7swAc4VInXwUgB6kbr13N2sEaReaCmdiAWuZMYMGEbxpMrx6kHfHRua5lFCg9SlFkxKwGsBY55bpm4br3ap1xWSBM984KvfOQjM6ahLaTeyctPLWDP1qJttrINe1NuQw4u5CzkM/uzMLafAAeSYBpjW0aH4HHiIoM5z5QGQAGu1q9xQeth6tH2Vmugxyj0tV6o3sg28sKqqy0a58SdOA//CS5eHcKAAA=",
  ).mapValues { raw =>
    val fontData = new Gzip(b64.wrap(new ByteArrayInputStream(raw.getBytes)))
    msg =>
      try FigletFont.convertOneLine(fontData, msg)
      finally fontData.close()
  }
}
