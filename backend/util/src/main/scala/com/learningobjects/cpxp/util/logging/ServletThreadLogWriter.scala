/*
 * LO Platform copyright (C) 2007â€“2025 LO Ventures LLC.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.learningobjects.cpxp.util.logging

import java.io.PrintWriter
import jakarta.servlet.http.HttpServletResponse

import scala.concurrent.duration.*

/** A log listener that prints all log messages generated by the current thread to a stream associated with a servlet
  * response. The stream is flushed after every message and dots are written to the stream periodically to keep the
  * connection open.
  * @param response
  *   the servlet response
  * @param writer
  *   the writer to which to write log messages
  * @param stopClass
  *   the class at which to stop writing stack traces
  */
class ServletThreadLogWriter(
  response: HttpServletResponse,
  writer: PrintWriter,
  stopClass: Class[?]
) extends ThreadLogWriter(writer, new MinimalFormatter(stopClass, false)):
  var timestamp = System.currentTimeMillis
  var closed    = false

  new Thread:
    override def run(): Unit =
      while !closed do
        writer synchronized {
          if System.currentTimeMillis() - timestamp > 15.seconds.toMillis then log("...")
        }
        Thread.sleep(5.seconds.toMillis)
  .start()

  override def close(): Unit =
    closed = true

  override protected def log(msg: String): Unit =
    writer synchronized {
      writer.print(msg)
      writer.flush()
      timestamp = System.currentTimeMillis
    }
    response.flushBuffer()
end ServletThreadLogWriter
