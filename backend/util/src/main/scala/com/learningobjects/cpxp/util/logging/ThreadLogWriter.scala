/*
 * LO Platform copyright (C) 2007â€“2025 LO Ventures LLC.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.learningobjects.cpxp.util.logging

import java.io.PrintWriter
import java.util.logging.*

import scala.util.DynamicVariable

/** A log listener that prints all log messages generated by the current thread to a writer.
  * @param writer
  *   the writer to which to write log messages
  * @param fmt
  *   the formatter to use
  */
class ThreadLogWriter(
  writer: PrintWriter,
  fmt: Formatter,
  thread: Thread = Thread.currentThread
) extends Handler:
  import ThreadLogWriter.*

  override def close(): Unit = ()

  override def flush(): Unit = ()

  override def publish(record: LogRecord): Unit =
    if (Thread.currentThread eq thread) || (effectiveThread.value eq thread) then log(fmt.format(record))

  protected def log(msg: String): Unit =
    writer.synchronized:
      writer.print(msg)
end ThreadLogWriter

object ThreadLogWriter:
  // Allow overriding the effective thread. This could be achieved alternatively by
  // providing context to the function run by `ThreadLogs` but sadness.
  private[logging] val effectiveThread: DynamicVariable[Thread] = new DynamicVariable[Thread](null)
