cpxp.home = ${java.io.tmpdir}

com.learningobjects.cpxp {
    //Local network configuration
    network {
        //name of the st machine
        localhost = "localhost"
        //port http runs on
        port = 8080
        //General cluster information
        cluster {
            name = "Local"
            type = "Local"
            singleton = true
        }
        node {
            name = ${com.learningobjects.cpxp.network.localhost}
        }

    }
    //Configuration for StaticServlet.
    static {
        host = ""
        suffix = ""
    }
    //Cache configuration
    cache {
        replicated = true
        memory {
            maxFileSize = 0
        }
        file {
            basedir = ${java.io.tmpdir}"/cache"
            persist = false
            attachmentSize = 1048576
        }
    }
    sendfile {
        gzip = true
    }
    debug {
        scripts = false
        web = false
    }
    web {
        gzip = true
    }
    //Attachment service configuration
    attachment {
        //Name of the default provider
        defaultProvider = "default"
        //A list of attachment providers
        providers = [
            {
                name = "default"
                type = "filesystem"
                properties = {
                    jclouds.identity = ""
                    jclouds.credential = ""
                    jclouds.filesystem.basedir = ${cpxp.home}"/storage"
                }
                container = "attachments"
            }
//            {
//                name = "dev-s3"
//                type = "aws-s3"
//                properties = {
//                    jclouds.identity = ""
//                    jclouds.credential = ""
//                }
//                container = "lo-dev-scratch"
//                region = "us-west-2"
//                pathPrefix = ""
//                failoverFor = ""
//            }
        ]
    }
    //Configures a socks proxy for HttpClients built by HttpUtils.
    socks {
        proxyHost = ""
        proxyPort = 0
    }
    //Configuration for Apache Commons HttpClient
    httpclient {
        maxConnections = 16
        connectionTimeout = 10000
        socketTimeout = 15000
    }
    executor {
        poolSize = 16
    }
    scheduler {
        poolSize = 1
        when = {}
    }
    current {
        logStatistics = false
    }
}

de.databases {
    //Common database config
    common {
        //Jpa Properties passed to the underlying vendor
        properties {
            hibernate.dialect = "com.learningobjects.cpxp.hibernate.CpxpPostgreSQLDialect"
            hibernate.archive.autodetection = ""
            hibernate.hbm2ddl.auto = "checksum"
            hibernate.hbm2ddl.schema_filter_provider = "com.learningobjects.cpxp.hibernate.CpxpSchemaFilter"
            hibernate.hbm2ddl.halt_on_error = "true" // https://hibernate.atlassian.net/browse/HBX-2476 / CpxpSchemaFilter
            hibernate.order_updates = "true"
            hibernate.generate_statistics = "true"
            hibernate.show_sql = "false"
            hibernate.jdbc.batch_size = 50
            hibernate.boot.allow_jdbc_metadata_access = "false"
            hibernate.cache.use_query_cache = "false"
            hibernate.cache.use_second_level_cache = "true"
            hibernate.cache.region.factory_class = "com.learningobjects.cpxp.locache.LoCacheRegionFactory"
            // https://docs.jboss.org/hibernate/orm/7.0/migration-guide/migration-guide.html#datetime-native
            hibernate.query.native.prefer_jdbc_datetime_types = "true"
        }
        //Configuration for the datasource.
        datasource {
            //Username
            user = "ug"
            //Password
            pass = ""
            //Class to user as the JDBC driver
            driver = "org.postgresql.Driver"
            monitoring = true
        }
        //Hikari Configuration
        hikari {
            enabled = true
            //Maximum Pool Size
            poolSize = 10
            //if true, register a JMX bean to monitor the Hikari connection pool.
            register = true
        }
    }
    //Configuration for a test database hosted by postgres
    //Assume this database is dropped between tests, and contains no other information or tables
    //outside of what the test provides.
    aboveground = ${de.databases.common}
    aboveground {
        name = "aboveground"
        properties {
            hibernate.hbm2ddl.auto = "create"
            hibernate.format_sql = "false"
            hibernate.cache.region.factory_class = "com.learningobjects.cpxp.locache.SimpleCacheRegionFactory"
        }
        datasource {
            url = "jdbc:postgresql://localhost:5432/aboveground@PROJECT@?reWriteBatchedInserts=true&options=-c%20statement_timeout=1min"
            monitoring = false // disable de.mon
        }
        //Hikari Configuration
        hikari {
            enabled = false
            //Maximum Pool Size
            poolSize = 1
            //if true, regsiter a JMX bean to monitor the Hikari connection pool.
            register = false
        }
    }
    //Configuration for the database actually used by the application.
    //useful to have when developing tests.
    underground = ${de.databases.common}
    underground {
        name = "underground"
        properties {
            hibernate.jdbc.batch_size = 50
        }
        datasource {
            url = "jdbc:postgresql://localhost:5432/underground?reWriteBatchedInserts=true"
        }
    }

    //Configuration for an in memory database hosted by hsql, using postgres dialect support.
    inmemory = ${de.databases.common}
    inmemory {
        name = "mem"
        properties {
            hibernate.hbm2ddl.auto ="create"
        }
        datasource {
            url = "jdbc:hsqldb:mem:test;sql.syntax_pgs=true"
            driver = "org.hsqldb.jdbcDriver"
            user = "sa"
            pass = ""
        }
    }

    redshift {
        name = "redshift"
        datasource {
            // see readme.md next to RedshiftEventSender for more info
            driver = "com.amazon.redshift.jdbc.Driver"
            monitoring = false
        }
        properties {}
        //Hikari Configuration
        hikari {
            enabled = false
            //Maximum Pool Size
            poolSize = 1
            //if true, regsiter a JMX bean to monitor the Hikari connection pool.
            register = false
        }
    }
}

//overlordInternal
loi.cp.devops {
    configured = false
    apiUrl = ""
    apiKey = ""
}

loi.cp.overlord.ldap {
    url = "",
    baseDN = "",
    authDN = "",
    authPassword = "",
    groupSuffix = "",
    config = ""
}

loi.cp.reply {
    configured = false
    queueUrl = ""
    accessKey = ""
    secretKey = ""
    domainName = ""
}

//APM Monitoring
apm {
    enabled = false
    trace   = false
    # set this to true to get the traces printed to your stdout
    # more useful than you may think
    println = false
}

overlord {
    username = "root"
    # password must be specified in user.conf or application.conf
}
