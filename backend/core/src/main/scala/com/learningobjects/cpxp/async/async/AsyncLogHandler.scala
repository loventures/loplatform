/*
 * LO Platform copyright (C) 2007â€“2025 LO Ventures LLC.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.learningobjects.cpxp.async.async

import com.learningobjects.cpxp.util.logging.MinimalFormatter

import java.util.logging.{Handler, LogRecord}

/** For a given thread, broadcasts any log records generated by that thread to the async operation actor.
  */
class AsyncLogHandler(stopClass: Class[?], thread: Thread = Thread.currentThread) extends Handler:
  private final val formatter = new MinimalFormatter(stopClass, false)

  override def close(): Unit = ()

  override def flush(): Unit = ()

  override def publish(record: LogRecord): Unit =
    if Thread.currentThread eq thread then AsyncOperationActor.tellProgress(0, 0, formatter.format(record).trim)
