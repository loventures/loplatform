pekko {
  actor {
    provider = "cluster"

    serializers {
      jackson = "com.learningobjects.cpxp.pekko.JacksonSerializer"
    }
    serialization-bindings {
      "com.fasterxml.jackson.databind.JsonNode" = jackson
      "com.learningobjects.cpxp.async.Event" = jackson
    }
    allow-java-serialization = true
  }
  remote {
    artery {
      transport = tcp # alt tls-tcp
      canonical.hostname = ${com.learningobjects.cpxp.network.localhost}
      canonical.port = 7803
      log-frame-size-exceeding = 10000b
      // maximum-frame-size = 256000b
    }
  }

  extensions = ["org.apache.pekko.cluster.pubsub.DistributedPubSub"]

  cluster {
  # Auto down is bad IRL although actual death of the leader then requires intervention
  # auto-down-unreachable-after = 15s
  }

  # Loggers to register at boot time (pekko.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["org.apache.pekko.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # JVM shutdown, System.exit(-1), in case of a fatal error,
  # such as OutOfMemoryError
  jvm-exit-on-fatal-error = off
  discovery {
    method = "config"
  }
  management {
    http {
      hostname = ${com.learningobjects.cpxp.network.localhost}
      port = 8558
    }
  }
}

keystore {
    file = ${cpxp.home}"/keystore"
    password = ""
}

de.tomcat {
    logDirectory = ${cpxp.home}"/logs"
    color = true
    logger = "jsonsingle"
}

com.learningobjects.cpxp.cache.file {
    basedir = ${de.tomcat.baseDirectory}"/cache"
}

include "user.conf"
